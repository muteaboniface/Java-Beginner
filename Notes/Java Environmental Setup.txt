>> Java platform - basic prerequisite for running and developing Java code
	 > Java Runtime Environment (JRE) - needed to run Java applications and applets;
	 > Java Development Kit (JDK) - needed to develop those Java applications and applets.
	 
	 > Implementations of JDK and JRE
		> Oracle Java SE - Sun JDK - maintained by Oracle 
		> OpenJDK - GPL v2 licence
		> GCJ
		
>> javac compiler.
	> Java source code is compiled into bytecode and saved as a .class file
	>  just-in-time (JIT) compiler.
		> converts bytecode to machine code
		
	java code is thus compiled twice
	
	
>> Procedure of execution
	> Write code in your editor
	> use javac to generate bytecode
	> use JIT compiler - (java) to convert your bytecoDE to machine code



>> Explicit compilition
	> javac ... MainClass.java ServletOne.java ...




>> File name
		> There can be only one public class defined per file. 
		> Should start with a capital letter


>> DEBUGGING
	> Debugging information is generated by the compiler together 
	with the machine code. It is a representation of the relationship
	between the executable program and the original source code. 
	This information is encoded into a pre-defined format and stored 
	alongside the machine code. Many such formats were invented over the years for 
	different platforms and executable files.



>> WHY JAVA IS FAST
	> java's JIT compiling was still faster than an "interpreter-language", 
	where code is compiled from high level language, instead of from byte-code each time it was used.
	
	> As Java applications run, they tend to become faster and faster, because the JIT can perform 
	runtime profiling and optimization to the code(HOTSPOTS) to meet the execution environment




>> JSE CODE EXECUTION - Thick clients were developed with rich GUI interfaces
	> GUI capabilities (AWT, Swing)
    > Network computing capabilities (RMI)
    > Multi-tasking capabilities (Threads)


	>> Code Executions under JSE
		> Stand-alone Java application - refers to a Java program where both the user interface and
		  business modules are running on the same computer.
		
			> ' *.jar' files - contain Utility classes, framework classes, and/or third party classes
				> need to be put in the CLASSPATH of the java program from which these classes are going to be used.
				> Sample Archive execution > java -jar Application.jar
			
			
		> Client Server applications
			> consists a front end and a backend
			> communication btw the front end and backend
				> data communication protocol between the two tiers.
				> use Java Remote Invocation (RMI). remote object can be created and used by the client
				


		> Web Applications > Browser(unified standard client) + Application server(unified standard back-end)
			> Web Application is an application that is running in the Application Server, and it can be accessed 
			and used by the Browser client.
			> Key components
				> The Web Browser. This is the container of rendering HTML text, and running client scripts
     		    > HTTP protocol. Text data are sent back and forth between Browser and the Server
				> Web server to serve static content, Application server to serve dynamic content and host EJBs.


		> J2EE code execution


		>jINI


>> ABBREVIATIONS
	> JSE (Java Standard Edition)
	> EJBs (Enterprise Javabean)
	


>> Windows quick commands
	> To access system properties
		> rundll32 shell32.dll,Control_RunDLL sysdm.cpl
		
		
		
		
>> WHAT IS?
	> STACK
	>REGISTERS
	