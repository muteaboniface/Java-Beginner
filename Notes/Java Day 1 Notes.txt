< Introduction>
    In 1995, Sun Microsystems released Java, an object-oriented and concurrency-oriented
    programming language and platform similar to C++ with streamlined and enhanced features. 
    

< Java Documentation>
https://docs.oracle.com/javase/8/docs/api/



++	Why learn Java
	possesses better high-level concurrency tools than C++
	Java runs inside of its virtual machine sandbox
	preferred languages for developing edge devices and Internet of Things apps
	most popular programming language for android apps
	rich libraries and plugins
	platform-independent at the source-code and binary levels
	
	
	+ Downsides
		Java runtime environments are required, which is more resource-intensive.
		
		
		
	+ OOP Concepts to master
		polymorphism, inheritance, abstraction, encapsulation

	Resources
	+ https://www.coursera.org/specializations/java-object-oriented?irclickid=x4xUklxkuxyNRq3RnExGRScZUkDyUA0AJ10nTA0&irgwc=1&utm_medium=partners&utm_source=impact&utm_campaign=2890636&utm_content=b2c
	+ https://www.edx.org/course/java-programming-fundamentals?source=aw&awc=6798_1659637204_b71ea81cbd751924d4949a6082d03c6a&utm_source=aw&utm_medium=affiliate_partner&utm_content=text-link&utm_term=466009_Quickcode.co
	+ https://www.linkedin.com/learning/learning-java-4?src=aff-ref&trk=aff-ir_progid%3D8005_partid%3D1137078_sid%3D_adid%3D646189&clickid=x4xUklxkuxyNRq3RnExGRScZUkDyUGX8J10nTA0&mcid=6851962469594763264&irgwc=1
	
	
	
	
	+ material under use
		https://www.educative.io/courses/learn-java-from-scratch?affiliate_id=5088579051061248
		https://www.youtube.com/watch?v=eIrMbAQSU34
		https://www.javatpoint.com/java-tutorial
	+ Environmental setup
		https://hackr.io/blog/how-to-learn-java
		
		
		
>> Friday - 5-8 session
System.out.println() displays text in the current line of the console 
and then move the cursor to the beginning of the next line.

>> Key features of Java
	> It is simple and Portable - memory management using pointers not allowed
	> It is Object-Oriented.
	> It is Independent of the host platform.
	> It is Secured & Dynamic: 
	> High Performance
	> JIT - Just in time compilers - makes use of byte-code 
	>

>> Practices present in c# that were disabled in Java
	> Use of Pointers
	> Operator overloading
	> Multiple inheritance
	> Friend classes (access another objectâ€™s private members)
	> Restrictions of explicit type casting (related to memory management)
	

>> Declarations and definitions
	> A class declaration provides the name and visibility of a class


> void main()
	> The main is the point from where all the Java programs start its execution
	> Every class must contain the main() method
		> valid signature of main()
		    > public static void main( String args[] )

	> called by the operating system when the program is executed.
		
	
> Printing
	> System.out.println( "Hello World!" );
	System.out.print() ;
	
	
> Compilers
	> The compiler is a translator that acts as an intermediary between the programmer and the CPU
	on the computer.
	
	> In Java, programs are not compiled into executable files; they are compiled into bytecode,
	which the JVM (Java Virtual Machine) then executes at runtime.
	
	>  Java source code is compiled into bytecode when we use the javac compiler
	> .class .. bytecode saved on disk
	
	> javac (pronounced "java-see") is the primary Java compiler included in the Java Development Kit (JDK) 
	from Oracle Corporation. Martin Odersky implemented the GJ compiler, and his implementation became the
	basis for javac
	
>> Compiler to choose?
	> Netbeans - includes WebApps and Webservices
		> Provides Git Repositories to its users
		
	> Intellij - currently under use

>> Variables
    A variable is a storage location paired with an associated symbolic name
        > Variables in Java are strongly typed  > must have a data type
        > Variables, once declared in the program, are allocated space in memory
        > Memory itself is organized as a long collection of one byte after another.
	
	
>> Data types > all signed in java
	> Integers
		> short > 16 bit signed
		> int > 32 bit signed
		> long > 64 bit signed
		
	> Floating points
		> float > 4 bytes
		> double > 8 bytes
	
	> char 2 bytes
		> 16 bit
		> uses single inverted commas
		
	> Boolean > 1 bit
	> Null
		> value that does not refer to any objec
		>  represent an uninitialized state

	> byte > 1 byte
		
>> Taking user unput
	> import java.util.Scanner;
		> import class
		> create an object of the class that takes user input
			> Scanner scanner_one = new Scanner(System.in);
			> String name = scanner_one.nextLine();
				> takes input from user until the Enter key is pressed.
				
>> convert to string
	> String.valueOf()

>> Run from the commandline
	> you can use java file.java
	> use javac to get a class then java {class_name}
> Java review with Francis
	+ Operators
		+ addition and concatenation
		//

	+ casting
		+ convert from one type to another
			+ String.valueof(var);


